
The Object Model:
-----------------
    The object model has been condensed down into two primary
    types:

    --> Primitives
    --> Structures

    In reality there is a third object called a "Ruxxer" but
    this class this is simply a Primitive that has been 
    extended in a new way.


The "Resource Problem" !!!!!
----------------------
--> A common technique for generating variations of protocol 
    fields is to store these values in memory as an array.
    For large protocols with many mutations this quickly
    led to resource problems (not enough memory to store all the 
    precalculated values). I think the solution to this is 
    done as follows:
    
    1. At the beginning of a protocol session, do a "dry run"
       that executes an 'expansion' function counting up a
       'cardinality' (number of mutations). Unlike Proteus,
        don't "prestore" the value generated in an array.

    2. When a value is requested of a Ruxxer at a certain
        iteration, start a counter at zero and then execute a 
        "selection" function which generates and returns
        a value.

    3. Increment this counter once per selection execution
        until the counter is at the desired iteration.
        When the counter is at the desired iteration
        return the value as the current value of the Ruxxer!!!!!!

The composition of a Ruxxer
---------------------------
    Ruxxers in Math terms are just "Bijective Functions". They operate
on the individual values of a set to produce a new (slightly different)
set of data. In this case these sets are Primitives that are Mutated
to create new sets of data.
This isnt entirely true because in reality a set does not really exist inside
the Primitive prior to the Ruxxer's run against the object, so in this way, 
a Ruxxer actually generates the set.

Using multiple Ruxxers on a Single Primitive.
---------------------------------------------
    Ruxxer allows you to apply multiple Ruxxers to a Primitive via 
something called at a Ruxxer Map.
    For instance, for a protocol field like: "Long Length Calculator"
you might want to attack that field with a few test cases "Off-By-One",
"Randomized Value", "Nullify", and "Max Value". Each of these 
specific test cases are implemented as different Ruxxers that are 
individually applied to different Primitives.
    A Ruxxer Map allows you to specify all of these Ruxxers so that 
no intervention is required to run all these test cases.
    For each Session object a Ruxxer Mapping object can be defined.
The Ruxxer Mapping object specifies which Ruxxers apply to which
specific INSTANCES (not primitives).
    This could done later with a "right click dropdown" in teh IDE
or a special window with two listviews that list all the 
Primitives/Structures and allow the user to right click 
and edit which ones go where.


Different Tree Traversal and Set Product Modes:
-----------------------------------------------
--> The first Model supported will just be "linear" resembling
    the Cartesian Product of Two Sets.

--> Future set product modes might also do some kind of "interleaved" mode.
    There may also be two kinds of "linear", "rightmost" and "leftmost"
    where we  can simply do the logical equivalent of 
    .reverse() on the __values array generated by a Rux.

--> There may also be some other set combination modes that apply to this
    problem, but I have to learn them.
